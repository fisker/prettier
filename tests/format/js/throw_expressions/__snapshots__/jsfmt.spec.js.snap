// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`throw_expression.js [acorn] format 1`] = `
"Unexpected token (1:25)
   1 | function save(filename = throw new TypeError(\\"Argument required\\")) {}
   2 |
   3 | lint(ast, {
   4 |   with: () => throw new Error(\\"avoid using 'with' statements.\\")
   5 | });
   6 |
   7 | function getEncoder(encoding) {
   8 |   const encoder = encoding === \\"utf8\\" ? new UTF8Encoder()
   9 |                 : encoding === \\"utf16le\\" ? new UTF16Encoder(false)
  10 |                 : encoding === \\"utf16be\\" ? new UTF16Encoder(true)
  11 |                 : throw new Error(\\"Unsupported encoding\\");
  12 | }
  13 |
  14 | class Product {
  15 |   get id() { return this._id; }
  16 |   set id(value) { this._id = value || throw new Error(\\"Invalid value\\"); }
  17 | }
  18 |"
`;

exports[`throw_expression.js [espree] format 1`] = `
"Unexpected token throw (1:26)
> 1 | function save(filename = throw new TypeError(\\"Argument required\\")) {}
    |                          ^
  2 |
  3 | lint(ast, {
  4 |   with: () => throw new Error(\\"avoid using 'with' statements.\\")"
`;

exports[`throw_expression.js [meriyah] format 1`] = `
"[1:30]: Unexpected token: 'throw' (1:30)
> 1 | function save(filename = throw new TypeError(\\"Argument required\\")) {}
    |                              ^
  2 |
  3 | lint(ast, {
  4 |   with: () => throw new Error(\\"avoid using 'with' statements.\\")"
`;

exports[`throw_expression.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function save(filename = throw new TypeError("Argument required")) {}

lint(ast, {
  with: () => throw new Error("avoid using 'with' statements.")
});

function getEncoder(encoding) {
  const encoder = encoding === "utf8" ? new UTF8Encoder()
                : encoding === "utf16le" ? new UTF16Encoder(false)
                : encoding === "utf16be" ? new UTF16Encoder(true)
                : throw new Error("Unsupported encoding");
}

class Product {
  get id() { return this._id; }
  set id(value) { this._id = value || throw new Error("Invalid value"); }
}

=====================================output=====================================
function save(filename = throw new TypeError("Argument required")) {}

lint(ast, {
  with: () => throw new Error("avoid using 'with' statements."),
});

function getEncoder(encoding) {
  const encoder =
    encoding === "utf8"
      ? new UTF8Encoder()
      : encoding === "utf16le"
      ? new UTF16Encoder(false)
      : encoding === "utf16be"
      ? new UTF16Encoder(true)
      : throw new Error("Unsupported encoding");
}

class Product {
  get id() {
    return this._id;
  }
  set id(value) {
    this._id = value || throw new Error("Invalid value");
  }
}

================================================================================
`;
