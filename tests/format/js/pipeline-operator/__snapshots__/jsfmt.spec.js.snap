// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`block-comments.js [acorn] format 1`] = `
"Unexpected token (2:1)
  1 | bifornCringerMoshedPerplexSawder
  2 | |> foo1
  3 | |> foo2 /* comment1 */
  4 | |> foo3 /* comment2 */
  5 | |> kochabCooieGameOnOboleUnweave
  6 | |> glimseGlyphsHazardNoopsTieTie;
  7 |"
`;

exports[`block-comments.js [espree] format 1`] = `
"Unexpected token > (2:2)
  1 | bifornCringerMoshedPerplexSawder
> 2 | |> foo1
    |  ^
  3 | |> foo2 /* comment1 */
  4 | |> foo3 /* comment2 */
  5 | |> kochabCooieGameOnOboleUnweave"
`;

exports[`block-comments.js [meriyah] format 1`] = `
"[2:2]: Unexpected token: '>' (2:2)
  1 | bifornCringerMoshedPerplexSawder
> 2 | |> foo1
    |  ^
  3 | |> foo2 /* comment1 */
  4 | |> foo3 /* comment2 */
  5 | |> kochabCooieGameOnOboleUnweave"
`;

exports[`block-comments.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
bifornCringerMoshedPerplexSawder
|> foo1
|> foo2 /* comment1 */
|> foo3 /* comment2 */
|> kochabCooieGameOnOboleUnweave
|> glimseGlyphsHazardNoopsTieTie;

=====================================output=====================================
bifornCringerMoshedPerplexSawder
  |> foo1
  |> foo2 /* comment1 */
  |> foo3 /* comment2 */
  |> kochabCooieGameOnOboleUnweave
  |> glimseGlyphsHazardNoopsTieTie;

================================================================================
`;

exports[`fsharp_style_pipeline_operator.js [acorn] format 1`] = `
"Unexpected token (2:3)
   1 | promise
   2 |   |> await
   3 |   |> x => doubleSay(x, ', ')
   4 |   |> capitalize
   5 |   |> x => x + '!'
   6 |   |> x => new User.Message(x)
   7 |   |> x => stream.write(x)
   8 |   |> await
   9 |   |> console.log;
  10 |
  11 | const result = \\"hello\\"
  12 |   |> doubleSay
  13 |   |> capitalize
  14 |   |> exclaim;
  15 |
  16 | const newScore = person.score
  17 |   |> double
  18 |   |> n => add(7, n)
  19 |   |> n => boundScore(0, 100, n);
  20 |
  21 | const user = url
  22 |   |> api.get
  23 |   |> await
  24 |   |> r => r.json()
  25 |   |> await
  26 |   |> j => j.data.user;
  27 |
  28 | const f = (x) => (x |> (y) => y + 1)
  29 |   |> (z) => z * y
  30 |
  31 | const _f = (x) => x
  32 |   |> (y) => y + 1
  33 |   |> (z) => z * y
  34 |
  35 | const g = (x) => x
  36 |   |> (y) => (y + 1 |> (z) => z * y)
  37 |
  38 | const _g = (x) => x
  39 |   |> (y => (y + 1 |> (z) => z * y))
  40 |
  41 | const __g = (x) => x
  42 |   |> (
  43 |     y => {
  44 |       return (y + 1 |> (z) => z * y);
  45 |     }
  46 |   )
  47 |
  48 | const f = x + ((f) => (f |> f));
  49 | const f = x |> (f) => f |> f;
  50 |"
`;

exports[`fsharp_style_pipeline_operator.js [espree] format 1`] = `
"Unexpected token > (2:4)
  1 | promise
> 2 |   |> await
    |    ^
  3 |   |> x => doubleSay(x, ', ')
  4 |   |> capitalize
  5 |   |> x => x + '!'"
`;

exports[`fsharp_style_pipeline_operator.js [meriyah] format 1`] = `
"[2:4]: Unexpected token: '>' (2:4)
  1 | promise
> 2 |   |> await
    |    ^
  3 |   |> x => doubleSay(x, ', ')
  4 |   |> capitalize
  5 |   |> x => x + '!'"
`;

exports[`fsharp_style_pipeline_operator.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

const user = url
  |> api.get
  |> await
  |> r => r.json()
  |> await
  |> j => j.data.user;

const f = (x) => (x |> (y) => y + 1)
  |> (z) => z * y

const _f = (x) => x
  |> (y) => y + 1
  |> (z) => z * y

const g = (x) => x
  |> (y) => (y + 1 |> (z) => z * y)

const _g = (x) => x
  |> (y => (y + 1 |> (z) => z * y))

const __g = (x) => x
  |> (
    y => {
      return (y + 1 |> (z) => z * y);
    }
  )

const f = x + ((f) => (f |> f));
const f = x |> (f) => f |> f;

=====================================output=====================================
promise
  |> await
  |> (x) => doubleSay(x, ", ")
  |> capitalize
  |> (x) => x + "!"
  |> (x) => new User.Message(x)
  |> (x) => stream.write(x)
  |> await
  |> console.log;

const result = "hello" |> doubleSay |> capitalize |> exclaim;

const newScore =
  person.score |> double |> (n) => add(7, n) |> (n) => boundScore(0, 100, n);

const user =
  url |> api.get |> await |> (r) => r.json() |> await |> (j) => j.data.user;

const f = (x) => x |> (y) => y + 1 |> (z) => z * y;

const _f = (x) => x |> (y) => y + 1 |> (z) => z * y;

const g = (x) => x |> (y) => (y + 1 |> (z) => z * y);

const _g = (x) => x |> ((y) => (y + 1 |> (z) => z * y));

const __g = (x) =>
  x
  |> ((y) => {
    return y + 1 |> (z) => z * y;
  });

const f = x + ((f) => f |> f);
const f = x |> (f) => f |> f;

================================================================================
`;

exports[`hack_pipeline_operator.js [acorn] format 1`] = `
"Unexpected token (1:3)
   1 | a |> await % |> % * 3;
   2 |
   3 | foo
   4 |   |> await %
   5 |   |> % || throw new Error(\`foo \${bar1}\`)
   6 |   |> bar2(%, \\", \\")
   7 |   |> bar3(%)
   8 |   |> % + \\"!\\"
   9 |   |> new Bar.Foo(%)
  10 |   |> await bar.bar(%)
  11 |   |> console.log(%);
  12 |
  13 | const result = \\"hello\\"
  14 |   |> doubleSay(%)
  15 |   |> capitalize(%, \\"foo\\")
  16 |   |> exclaim(%);
  17 |
  18 | function createPerson (attrs) {
  19 |   attrs
  20 |     |> foo(%)
  21 |     |> foo(%)
  22 |     |> Person.insertIntoDatabase(%);
  23 | }
  24 |
  25 | const result = [1,2,3]
  26 |  |> %.map(a => a * 2 )
  27 |  |> %.filter(a => a > 5)
  28 |  |> %.reduce((sum, a) => a+sum, 0)
  29 |  |> increment(%)
  30 |  |> add(%, 3)
  31 |
  32 | const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  33 |   |> map(%, event => event.target.value)
  34 |   |> filter(%, searchText => searchText.length > 2)
  35 |   |> debounce(%, 300)
  36 |   |> distinctUntilChanged(%)
  37 |   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  38 |   |> share(%);
  39 |
  40 | v |> %.method() |> f(%);
  41 |
  42 | async function * f () {
  43 |   return x
  44 |     |> (yield %)
  45 |     |> (await %)
  46 |     |> y(%)
  47 |     |> a.b(%)
  48 |     |> (a.b(%))
  49 |     |> a.b(%)
  50 |     |> (a.b?.(%))
  51 |     |> a.b?.(%);
  52 | }
  53 |"
`;

exports[`hack_pipeline_operator.js [espree] format 1`] = `
"Unexpected token > (1:4)
> 1 | a |> await % |> % * 3;
    |    ^
  2 |
  3 | foo
  4 |   |> await %"
`;

exports[`hack_pipeline_operator.js [meriyah] format 1`] = `
"[1:4]: Unexpected token: '>' (1:4)
> 1 | a |> await % |> % * 3;
    |    ^
  2 |
  3 | foo
  4 |   |> await %"
`;

exports[`hack_pipeline_operator.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a |> await % |> % * 3;

foo
  |> await %
  |> % || throw new Error(\`foo \${bar1}\`)
  |> bar2(%, ", ")
  |> bar3(%)
  |> % + "!"
  |> new Bar.Foo(%)
  |> await bar.bar(%)
  |> console.log(%);

const result = "hello"
  |> doubleSay(%)
  |> capitalize(%, "foo")
  |> exclaim(%);

function createPerson (attrs) {
  attrs
    |> foo(%)
    |> foo(%)
    |> Person.insertIntoDatabase(%);
}

const result = [1,2,3]
 |> %.map(a => a * 2 )
 |> %.filter(a => a > 5)
 |> %.reduce((sum, a) => a+sum, 0)
 |> increment(%)
 |> add(%, 3)

const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  |> map(%, event => event.target.value)
  |> filter(%, searchText => searchText.length > 2)
  |> debounce(%, 300)
  |> distinctUntilChanged(%)
  |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  |> share(%);

v |> %.method() |> f(%);

async function * f () {
  return x
    |> (yield %)
    |> (await %)
    |> y(%)
    |> a.b(%)
    |> (a.b(%))
    |> a.b(%)
    |> (a.b?.(%))
    |> a.b?.(%);
}

=====================================output=====================================
a |> (await %) |> % * 3;

foo
|> (await %)
|> % || throw new Error(\`foo \${bar1}\`)
|> bar2(%, ", ")
|> bar3(%)
|> % + "!"
|> new Bar.Foo(%)
|> (await bar.bar(%))
|> console.log(%);

const result = "hello" |> doubleSay(%) |> capitalize(%, "foo") |> exclaim(%);

function createPerson(attrs) {
  attrs |> foo(%) |> foo(%) |> Person.insertIntoDatabase(%);
}

const result =
  [1, 2, 3]
  |> %.map((a) => a * 2)
  |> %.filter((a) => a > 5)
  |> %.reduce((sum, a) => a + sum, 0)
  |> increment(%)
  |> add(%, 3);

const searchResults$ =
  fromEvent(document.querySelector("input"), "input")
  |> map(%, (event) => event.target.value)
  |> filter(%, (searchText) => searchText.length > 2)
  |> debounce(%, 300)
  |> distinctUntilChanged(%)
  |> switchMap(%, (searchText) => queryApi(searchText) |> retry(%, 3))
  |> share(%);

v |> %.method() |> f(%);

async function* f() {
  return (
    x
    |> (yield %)
    |> (await %)
    |> y(%)
    |> a.b(%)
    |> a.b(%)
    |> a.b(%)
    |> a.b?.(%)
    |> a.b?.(%)
  );
}

================================================================================
`;

exports[`minimal_pipeline_operator.js [acorn] format 1`] = `
"Unexpected token (1:3)
   1 | a |> b |> c;
   2 |
   3 | a |> (b |> c);
   4 |
   5 | (a |> b) || c;
   6 | a |> (b || c);
   7 |
   8 | let result = \\"hello\\"
   9 |   |> doubleSay
  10 |   |> capitalize
  11 |   |> exclaim;
  12 |
  13 | let newScore = person.score
  14 |   |> double
  15 |   |> (_ => add(7, _))
  16 |   |> (_ => subtract(2, _))
  17 |   |> (_ => boundScore(0, 100, _));
  18 |
  19 | function createPerson (attrs) {
  20 |   attrs
  21 |     |> bounded('age', 1, 100)
  22 |     |> format('name', /^[a-z]$/i)
  23 |     |> Person.insertIntoDatabase;
  24 | }
  25 |
  26 | foo |> (bar ?? baz);
  27 | (foo |> bar) ?? baz;
  28 |
  29 | const result = [1,2,3]
  30 |  |> map(a => a * 2)
  31 |  |> filter(a => a > 5)
  32 |  |> reduce((sum, a) => a+sum, 0)
  33 |  |> increment
  34 |  |> add(3)
  35 |
  36 | const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  37 |   |> map(event => event.target.value)
  38 |   |> filter(searchText => searchText.length > 2)
  39 |   |> debounce(300)
  40 |   |> distinctUntilChanged()
  41 |   |> switchMap(searchText => queryApi(searchText) |> retry(3))
  42 |   |> share();
  43 |
  44 | const result = [5,10]
  45 |   |> (_ => _.map(x => x * 2))
  46 |   |> (_ => _.reduce( (a,b) => a + b ))
  47 |   |> (sum => sum + 1)
  48 |
  49 | const result2 = [4, 9].map( x => x |> inc |> double )
  50 |"
`;

exports[`minimal_pipeline_operator.js [espree] format 1`] = `
"Unexpected token > (1:4)
> 1 | a |> b |> c;
    |    ^
  2 |
  3 | a |> (b |> c);
  4 |"
`;

exports[`minimal_pipeline_operator.js [meriyah] format 1`] = `
"[1:4]: Unexpected token: '>' (1:4)
> 1 | a |> b |> c;
    |    ^
  2 |
  3 | a |> (b |> c);
  4 |"
`;

exports[`minimal_pipeline_operator.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a |> b |> c;

a |> (b |> c);

(a |> b) || c;
a |> (b || c);

let result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

let newScore = person.score
  |> double
  |> (_ => add(7, _))
  |> (_ => subtract(2, _))
  |> (_ => boundScore(0, 100, _));

function createPerson (attrs) {
  attrs
    |> bounded('age', 1, 100)
    |> format('name', /^[a-z]$/i)
    |> Person.insertIntoDatabase;
}

foo |> (bar ?? baz);
(foo |> bar) ?? baz;

const result = [1,2,3]
 |> map(a => a * 2)
 |> filter(a => a > 5)
 |> reduce((sum, a) => a+sum, 0)
 |> increment
 |> add(3)

const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  |> map(event => event.target.value)
  |> filter(searchText => searchText.length > 2)
  |> debounce(300)
  |> distinctUntilChanged()
  |> switchMap(searchText => queryApi(searchText) |> retry(3))
  |> share();

const result = [5,10]
  |> (_ => _.map(x => x * 2))
  |> (_ => _.reduce( (a,b) => a + b ))
  |> (sum => sum + 1)

const result2 = [4, 9].map( x => x |> inc |> double )

=====================================output=====================================
a |> b |> c;

a |> (b |> c);

(a |> b) || c;
a |> b || c;

let result = "hello" |> doubleSay |> capitalize |> exclaim;

let newScore =
  person.score
  |> double
  |> ((_) => add(7, _))
  |> ((_) => subtract(2, _))
  |> ((_) => boundScore(0, 100, _));

function createPerson(attrs) {
  attrs
    |> bounded("age", 1, 100)
    |> format("name", /^[a-z]$/i)
    |> Person.insertIntoDatabase;
}

foo |> bar ?? baz;
(foo |> bar) ?? baz;

const result =
  [1, 2, 3]
  |> map((a) => a * 2)
  |> filter((a) => a > 5)
  |> reduce((sum, a) => a + sum, 0)
  |> increment
  |> add(3);

const searchResults$ =
  fromEvent(document.querySelector("input"), "input")
  |> map((event) => event.target.value)
  |> filter((searchText) => searchText.length > 2)
  |> debounce(300)
  |> distinctUntilChanged()
  |> switchMap((searchText) => queryApi(searchText) |> retry(3))
  |> share();

const result =
  [5, 10]
  |> ((_) => _.map((x) => x * 2))
  |> ((_) => _.reduce((a, b) => a + b))
  |> ((sum) => sum + 1);

const result2 = [4, 9].map((x) => x |> inc |> double);

================================================================================
`;
